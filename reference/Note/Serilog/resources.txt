
官方地址：https://github.com/serilog/serilog
			https://serilog.net/

文档地址：https://github.com/serilog/serilog/wiki/Getting-Started

根据日志级别分文件：
用到的是Enrich属性 ForContext上下文 Filter过滤器  实现的

https://stackoverflow.com/questions/28292601/serilog-multiple-log-files
 
            Log.Logger = new LoggerConfiguration()
                   .MinimumLevel.Information()
                   .WriteTo.ColoredConsole()
                   .Enrich.FromLogContext()
                   //.Enrich.With(new LogTypeEnricher())
                   .WriteTo.Logger(l => l.Filter.ByIncludingOnly(e => e.Level == LogEventLevel.Debug).WriteTo.RollingFile(pathFormat: @"Logs\Debug-{Date}.log", outputTemplate: "{Timestamp:yyyy-MM-dd HH:mm:ss.fff} [{Level}] {Message}{NewLine}{Exception}"))
                   .WriteTo.Logger(l => l.Filter.ByIncludingOnly(e => e.Level == LogEventLevel.Information).WriteTo.RollingFile(pathFormat: @"Logs\Info-{Date}.log", outputTemplate: "{Timestamp:yyyy-MM-dd HH:mm:ss.fff} [{Level}] {Message}{NewLine}{Exception}"))
                   .WriteTo.Logger(l => l.Filter.ByIncludingOnly(e => e.Level == LogEventLevel.Warning).WriteTo.RollingFile(pathFormat: @"Logs\Warning-{Date}.log", outputTemplate: "{Timestamp:yyyy-MM-dd HH:mm:ss.fff} [{Level}] {Message}{NewLine}{Exception}"))
                   .WriteTo.Logger(l => l.Filter.ByIncludingOnly(e => e.Level == LogEventLevel.Error).WriteTo.RollingFile(pathFormat: @"Logs\Error-{Date}.log", outputTemplate: "{Timestamp:yyyy-MM-dd HH:mm:ss.fff} [{Level}] {Message}{NewLine}{Exception}"))
                   .WriteTo.Logger(l => l.Filter.ByIncludingOnly(e => e.Level == LogEventLevel.Fatal).WriteTo.RollingFile(pathFormat: @"Logs\Fatal-{Date}.log", outputTemplate: "{Timestamp:yyyy-MM-dd HH:mm:ss.fff} [{Level}] {Message}{NewLine}{Exception}"))                  
                   .CreateLogger();

            #region 配合使用，可以按实际业务，分别存储日记文件，例如订单，接口
            /*
			 //https://stackoverflow.com/questions/46516359/filter-serilog-logs-to-different-sinks-depending-on-context-source
             //https://www.cnblogs.com/mq0036/p/8479956.html
             //.WriteTo.Logger(lc => lc
             //          .Filter.ByIncludingOnly(Matching.FromSource("HB.Api"))
             //          .Filter.ByIncludingOnly(Matching.WithProperty<string>("LogType", p => p == "Api"))
             //          .WriteTo.RollingFile(pathFormat: @"logs/api-{Date}.log", outputTemplate: "{Timestamp:yyyy-MM-dd HH:mm:ss.fff} [{Level}] {Message}{NewLine}{Exception}"))

            //using (LogContext.PushProperty("LogType", "Order"))
            //{
            //    _logger.LogInformation(user.UserName);
            //}
            //using (LogContext.PushProperty("LogType", "Api"))
            //{
            //    _logger.LogInformation(user.Password);
            //}
            *
------------------------------------------------------------分隔符------------------------------------------------------------------------------
java 有成熟的日志可视化工具 https://www.jianshu.com/p/bcf0445a1b8f
ELK，即 Elasticsearch、Logstash 和 Kibana 简称，是最流行的开源日志聚合工具。它被 Netflix、Facebook、微软、LinkedIn 和思科使用。这三个组件都是由 Elastic 开发和维护的。Elasticsearch 本质上是一个 NoSQL 数据库，以 Lucene 搜索引擎实现的。Logstash 是一个日志管道系统，可以接收数据，转换数据，并将其加载到像 Elasticsearch 这样的应用中。Kibana 是 Elasticsearch 之上的可视化层。
几年前，引入了 Beats 。Beats 是数据采集器。它们简化了将数据运送到 Logstash 的过程。用户不需要了解每种日志的正确语法，而是可以安装一个 Beats 来正确导出 NGINX 日志或 Envoy 代理日志，以便在 Elasticsearch 中有效地使用它们。


C# .net core 下的日志可视化工具logdashboard  可以在abp next中使用
https://doc.logdashboard.net/

